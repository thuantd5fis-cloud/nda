import { PrismaClient, PostStatus } from '@prisma/client';

declare const process: any;
const prisma = new PrismaClient();

async function seedActivitiesCategories() {
  console.log('üèÉ Adding activities categories...');

  const activityCategories = [
    {
      name: 'EVENTS',
      slug: 'events',
      metaTitle: 'S·ª± ki·ªán',
      metaDescription: 'Danh s√°ch c√°c s·ª± ki·ªán, h·ªôi th·∫£o, workshop v√† c√°c ho·∫°t ƒë·ªông kh√°c',
      locale: 'vi',
    },
    {
      name: 'GLOBAL_EXPERTS',
      slug: 'global-experts',
      metaTitle: 'Chuy√™n gia to√†n c·∫ßu',
      metaDescription: 'Th√¥ng tin v·ªÅ c√°c chuy√™n gia h√†ng ƒë·∫ßu tr√™n th·∫ø gi·ªõi',
      locale: 'vi',
    },
    {
      name: 'TRAINING',
      slug: 'training',
      metaTitle: 'ƒê√†o t·∫°o',
      metaDescription: 'C√°c ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o, kh√≥a h·ªçc v√† t√†i li·ªáu h·ªçc t·∫≠p',
      locale: 'vi',
    },
    {
      name: 'POLICIES_AND_LEGAL_AFFAIRS',
      slug: 'policies-and-legal-affairs',
      metaTitle: 'Ch√≠nh s√°ch v√† Ph√°p l√Ω',
      metaDescription: 'C√°c ch√≠nh s√°ch, quy ƒë·ªãnh ph√°p lu·∫≠t v√† vƒÉn b·∫£n h∆∞·ªõng d·∫´n',
      locale: 'vi',
    },
    {
      name: 'INTERNATIONAL_COOPERATION',
      slug: 'international-cooperation',
      metaTitle: 'H·ª£p t√°c qu·ªëc t·∫ø',
      metaDescription: 'C√°c ho·∫°t ƒë·ªông h·ª£p t√°c qu·ªëc t·∫ø, d·ª± √°n v√† quan h·ªá ƒë·ªëi t√°c',
      locale: 'vi',
    },
  ];

  for (const categoryData of activityCategories) {
    const existingCategory = await prisma.category.findUnique({
      where: { slug: categoryData.slug },
    });

    if (!existingCategory) {
      const category = await prisma.category.create({
        data: categoryData,
      });
      console.log(`‚úÖ Created category: ${category.name} (${category.slug})`);

      // T·∫°o m·ªôt s·ªë posts m·∫´u cho category n√†y
      const samplePosts = [
        {
          title: `Sample ${categoryData.name} Post 1`,
          slug: `sample-${categoryData.slug}-post-1`,
          excerpt: `This is a sample post for ${categoryData.name} category`,
          content: `<h1>Sample ${categoryData.name} Post</h1><p>This is sample content for ${categoryData.name} category.</p>`,
          status: PostStatus.PUBLISHED,
          allowComments: true,
          isFeatured: false,
          requireLogin: false,
          type: 'article',
          locale: 'vi',
          publishedAt: new Date(),
          metaTitle: `Sample ${categoryData.name} Post - Meta Title`,
          metaDescription: `Meta description for sample ${categoryData.name} post`,
          keywords: [categoryData.slug, 'sample', 'activity'],
        },
        {
          title: `Sample ${categoryData.name} Post 2`,
          slug: `sample-${categoryData.slug}-post-2`,
          excerpt: `This is another sample post for ${categoryData.name} category`,
          content: `<h1>Another Sample ${categoryData.name} Post</h1><p>This is another sample content for ${categoryData.name} category.</p>`,
          status: PostStatus.PUBLISHED,
          allowComments: true,
          isFeatured: true,
          requireLogin: false,
          type: 'article',
          locale: 'vi',
          publishedAt: new Date(),
          metaTitle: `Another Sample ${categoryData.name} Post - Meta Title`,
          metaDescription: `Meta description for another sample ${categoryData.name} post`,
          keywords: [categoryData.slug, 'sample', 'activity', 'featured'],
        },
      ];

      // L·∫•y user ƒë·∫ßu ti√™n ƒë·ªÉ l√†m author
      const firstUser = await prisma.user.findFirst();
      if (firstUser) {
        for (const postData of samplePosts) {
          const existingPost = await prisma.post.findUnique({
            where: { slug: postData.slug },
          });

          if (!existingPost) {
            const post = await prisma.post.create({
              data: {
                ...postData,
                createdBy: firstUser.id,
              },
            });

            // Assign category to post
            await prisma.postCategory.create({
              data: {
                postId: post.id,
                categoryId: category.id,
              },
            });

            console.log(`  ‚úÖ Created sample post: ${post.title}`);
          }
        }
      }
    } else {
      console.log(`‚ÑπÔ∏è Category already exists: ${existingCategory.name} (${existingCategory.slug})`);
    }
  }

  console.log('‚úÖ Activities categories seeded successfully!');
}

seedActivitiesCategories()
  .catch((e) => {
    console.error('‚ùå Failed to seed activities categories:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
