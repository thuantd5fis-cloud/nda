generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  passwordHash       String              @map("password_hash")
  fullName           String              @map("full_name")
  status             UserStatus          @default(ACTIVE)
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  avatar             String?
  emailVerified      Boolean             @default(false) @map("email_verified")
  lastLoginAt        DateTime?           @map("last_login_at")
  loginCount         Int                 @default(0) @map("login_count")
  phone              String?
  mustChangePassword Boolean             @default(false) @map("must_change_password")
  passwordChangedAt  DateTime?           @map("password_changed_at")
  assets             Asset[]
  auditTrails        AuditTrail[]
  eventRegistrations EventRegistration[]
  events             Event[]             @relation("EventCreator")
  faqFeedback        FAQFeedback[]
  faqs               FAQ[]               @relation("FAQAuthor")
  posts              Post[]              @relation("PostAuthor")
  updatedPosts       Post[]              @relation("PostUpdater")
  sessions           Session[]
  userRoles          UserRole[]
  filesUploads     FilesUpload[]

  @@map("users")
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(cuid())
  resource        String
  action          String
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  ip           String?
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  isActive     Boolean  @default(true) @map("is_active")
  lastAccessAt DateTime @default(now()) @map("last_access_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Category {
  id              String         @id @default(cuid())
  name            String
  slug            String         @unique
  parentId        String?        @map("parent_id")
  metaTitle       String?        @map("meta_title")
  metaDescription String?        @map("meta_description")
  openGraph       Json?          @map("open_graph")
  locale          String         @default("vi")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  color           String?
  description     String?
  icon            String?
  isActive        Boolean        @default(true) @map("is_active")
  sortOrder       Int            @default(0) @map("sort_order")
  parent          Category?      @relation("CategoryParent", fields: [parentId], references: [id])
  children        Category[]     @relation("CategoryParent")
  postCategories  PostCategory[]

  @@map("categories")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  createdAt   DateTime  @default(now()) @map("created_at")
  color       String    @default("blue")
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  postTags    PostTag[]

  @@map("tags")
}

model Post {
  id              String            @id @default(cuid())
  title           String
  slug            String            @unique
  excerpt         String?
  content         String
  status          PostStatus        @default(DRAFT)
  allowComments   Boolean           @default(true) @map("allow_comments")
  isFeatured      Boolean           @default(false) @map("is_featured")
  requireLogin    Boolean           @default(false) @map("require_login")
  type            String            @default("article")
  locale          String            @default("vi")
  publishedAt     DateTime?         @map("published_at")
  createdBy       String            @map("created_by")
  updatedBy       String?           @map("updated_by")
  metaTitle       String?           @map("meta_title")
  metaDescription String?           @map("meta_description")
  keywords        String[]
  openGraph       Json?             @map("open_graph")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  featuredImage   String?           @map("featured_image")
  analyticsViews  AnalyticsView[]
  auditTrails     AuditTrail[]
  postCategories  PostCategory[]
  postTags        PostTag[]
  translations    PostTranslation[]
  author          User              @relation("PostAuthor", fields: [createdBy], references: [id])
  updater         User?             @relation("PostUpdater", fields: [updatedBy], references: [id])

  @@map("posts")
}

model PostTranslation {
  id              String   @id @default(cuid())
  postId          String   @map("post_id")
  locale          String
  title           String
  slug            String
  excerpt         String?
  content         String
  metaTitle       String?  @map("meta_title")
  metaDescription String?  @map("meta_description")
  keywords        String[]
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, locale])
  @@unique([locale, slug])
  @@map("post_translations")
}

model PostCategory {
  postId     String   @map("post_id")
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  postId String @map("post_id")
  tagId  String @map("tag_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Asset {
  id            String       @id @default(cuid())
  type          AssetType
  filename      String
  path          String
  size          Int
  width         Int?
  height        Int?
  duration      Int?
  optimized     Boolean      @default(false)
  createdBy     String       @map("created_by")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  alt           String?
  caption       String?
  description   String?
  downloadCount Int          @default(0) @map("download_count")
  metadata      Json?
  mimeType      String       @map("mime_type")
  name          String
  originalName  String       @map("original_name")
  tags          String[]
  thumbnailUrl  String?      @map("thumbnail_url")
  url           String
  usageCount    Int          @default(0) @map("usage_count")
  assetUsages   AssetUsage[]
  creator       User         @relation(fields: [createdBy], references: [id])
  members       Member[]

  @@map("assets")
}

model Member {
  id               String             @id @default(cuid())
  crmId            String?            @unique @map("crm_id")
  fullName         String             @map("full_name")
  email            String?
  phone            String?
  position         String?
  bio              String?
  avatarAssetId    String?            @map("avatar_asset_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  articlesCount    Int                @default(0) @map("articles_count")
  avatar           String?
  certifications   String[]
  company          String?
  experience       Int                @default(0)
  expertise        String[]
  github           String?
  isActive         Boolean            @default(true) @map("is_active")
  isExpert         Boolean            @default(false) @map("is_expert")
  joinDate         DateTime           @default(now()) @map("join_date")
  linkedin         String?
  location         String?
  mentoringCount   Int                @default(0) @map("mentoring_count")
  title            String?
  twitter          String?
  website          String?
  avatarAsset      Asset?             @relation(fields: [avatarAssetId], references: [id])
  mentoringHistory MentoringSession[]

  @@map("members")
}

model MentoringSession {
  id         String          @id @default(cuid())
  mentorId   String          @map("mentor_id")
  menteeName String          @map("mentee_name")
  topic      String
  date       DateTime
  duration   Int
  status     MentoringStatus @default(SCHEDULED)
  createdAt  DateTime        @default(now()) @map("created_at")
  mentor     Member          @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@map("mentoring_sessions")
}

model Event {
  id                   String              @id @default(cuid())
  title                String
  location             String?
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  attendeesCount       Int                 @default(0) @map("attendees_count")
  contactEmail         String?             @map("contact_email")
  contactPhone         String?             @map("contact_phone")
  createdBy            String              @map("created_by")
  description          String
  endDate              DateTime?           @map("end_date")
  image                String?
  isPaid               Boolean             @default(false) @map("is_paid")
  isPublic             Boolean             @default(true) @map("is_public")
  maxAttendees         Int?                @map("max_attendees")
  organizer            String?
  price                Float               @default(0)
  registrationDeadline DateTime?           @map("registration_deadline")
  requiresRegistration Boolean             @default(true) @map("requires_registration")
  startDate            DateTime            @map("start_date")
  status               EventStatus         @default(UPCOMING)
  tags                 String[]
  venue                String?
  website              String?
  registrations        EventRegistration[]
  creator              User                @relation("EventCreator", fields: [createdBy], references: [id])

  @@map("events")
}

model EventRegistration {
  id            String        @id @default(cuid())
  eventId       String        @map("event_id")
  userId        String        @map("user_id")
  fullName      String        @map("full_name")
  email         String
  phone         String?
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  registeredAt  DateTime      @default(now()) @map("registered_at")
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_registrations")
}

model FAQ {
  id             String        @id @default(cuid())
  question       String
  answer         String
  order          Int           @default(0)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  category       String
  createdBy      String        @map("created_by")
  isPublished    Boolean       @default(true) @map("is_published")
  likeCount      Int           @default(0) @map("like_count")
  priority       Int           @default(3)
  searchKeywords String[]      @map("search_keywords")
  tags           String[]
  viewCount      Int           @default(0) @map("view_count")
  feedback       FAQFeedback[]
  author         User          @relation("FAQAuthor", fields: [createdBy], references: [id])

  @@map("faqs")
}

model FAQFeedback {
  id        String       @id @default(cuid())
  faqId     String       @map("faq_id")
  userId    String?      @map("user_id")
  type      FeedbackType
  comment   String?
  createdAt DateTime     @default(now()) @map("created_at")
  faq       FAQ          @relation(fields: [faqId], references: [id], onDelete: Cascade)
  user      User?        @relation(fields: [userId], references: [id])

  @@map("faq_feedback")
}

model AuditTrail {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  entity     String
  entityId   String   @map("entity_id")
  action     String
  beforeJson Json?    @map("before_json")
  afterJson  Json?    @map("after_json")
  createdAt  DateTime @default(now()) @map("created_at")
  post       Post     @relation(fields: [entityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("audit_trails")
}

model AnalyticsView {
  id       String   @id @default(cuid())
  entity   String
  entityId String   @map("entity_id")
  date     DateTime @db.Date
  views    Int      @default(1)
  post     Post     @relation(fields: [entityId], references: [id])

  @@unique([entity, entityId, date])
  @@map("analytics_views")
}

model AssetUsage {
  id         String   @id @default(cuid())
  assetId    String   @map("asset_id")
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  title      String
  url        String
  createdAt  DateTime @default(now()) @map("created_at")
  asset      Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("asset_usage")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PostStatus {
  DRAFT
  REVIEW
  PUBLISHED
  REJECTED
  ARCHIVED
}

enum AssetType {
  IMAGE
  VIDEO
  FILE
  AUDIO
  PDF
}

enum MentoringStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

enum FeedbackType {
  HELPFUL
  NOT_HELPFUL
}

// System Settings
model Settings {
  id        String   @id @default(cuid())
  category  String   @unique  // "general", "security", "email", etc.
  data      Json     // All settings for this category as JSON
  isSystem  Boolean  @default(false) @map("is_system")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

// Files Upload (Videos, Images, Documents)
model FilesUpload {
  id          String   @id @default(uuid()) @db.Uuid
  fileName    String   // Original file name
  storedName  String   // Stored file name in Minio
  filePath    String   // Full path in Minio
  fileSize    Int      // File size in bytes
  mimeType    String   // MIME type (video/mp4, image/jpeg, etc.)
  fileType    String   // "video", "image", "document"
  uploadedBy  String   // User ID who uploaded
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  uploader    User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("files_upload")
}

// Digital Era Quotes
model DigitalEra {
  id        String   @id @default(uuid()) @db.Uuid
  text      String   // Quote content
  author    String   // Author or source
  order     Int      @default(0) // Display order
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("digital_era")
}