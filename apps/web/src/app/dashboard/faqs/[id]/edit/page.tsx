'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { Button, Input } from '@cms/ui';

interface FAQFormData {
  id: string;
  question: string;
  answer: string;
  category: string;
  tags: string[];
  isPublished: boolean;
  priority: number;
  relatedFAQs: string[];
  searchKeywords: string[];
  viewCount: number;
  likeCount: number;
  createdAt: string;
  updatedAt: string;
}

const faqCategories = [
  'T√†i kho·∫£n & ƒêƒÉng nh·∫≠p',
  'B√†i vi·∫øt & N·ªôi dung', 
  'Thanh to√°n & Ph√≠',
  'S·ª± ki·ªán & Workshop',
  'Mentoring & T∆∞ v·∫•n',
  'T√≠nh nƒÉng & S·ª≠ d·ª•ng',
  'B·∫£o m·∫≠t & Quy·ªÅn ri√™ng t∆∞',
  'H·ªó tr·ª£ k·ªπ thu·∫≠t',
  'Ch√≠nh s√°ch & Quy ƒë·ªãnh'
];

const commonTags = [
  'Ph·ªï bi·∫øn', 'M·ªõi b·∫Øt ƒë·∫ßu', 'N√¢ng cao', 'Kh·∫©n c·∫•p', 
  'Thanh to√°n', 'T√†i kho·∫£n', 'B·∫£o m·∫≠t', 'K·ªπ thu·∫≠t',
  'Ch√≠nh s√°ch', 'H∆∞·ªõng d·∫´n', 'L·ªói', 'C·∫≠p nh·∫≠t'
];

// Mock data for existing FAQ
const getMockFAQ = (id: string): FAQFormData => ({
  id,
  question: 'L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng b√†i vi·∫øt tr√™n h·ªá th·ªëng?',
  answer: 'ƒê·ªÉ ƒëƒÉng b√†i vi·∫øt tr√™n h·ªá th·ªëng, b·∫°n c·∫ßn l√†m theo c√°c b∆∞·ªõc sau:\n\n1. **ƒêƒÉng nh·∫≠p t√†i kho·∫£n**: Tr∆∞·ªõc ti√™n, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n c√≥ quy·ªÅn ƒëƒÉng b√†i (Author tr·ªü l√™n).\n\n2. **V√†o menu B√†i vi·∫øt**: Click v√†o menu "B√†i vi·∫øt" tr√™n thanh ƒëi·ªÅu h∆∞·ªõng ch√≠nh.\n\n3. **T·∫°o b√†i vi·∫øt m·ªõi**: Click n√∫t "T·∫°o b√†i vi·∫øt m·ªõi" ƒë·ªÉ m·ªü form so·∫°n th·∫£o.\n\n4. **ƒêi·ªÅn th√¥ng tin**: Nh·∫≠p ti√™u ƒë·ªÅ, n·ªôi dung, ch·ªçn danh m·ª•c v√† tags ph√π h·ª£p.\n\n5. **G·ª≠i duy·ªát**: Sau khi ho√†n th√†nh, click "G·ª≠i duy·ªát" ƒë·ªÉ Admin ki·ªÉm tra v√† xu·∫•t b·∫£n.\n\nL∆∞u √Ω: B√†i vi·∫øt s·∫Ω ƒë∆∞·ª£c review trong v√≤ng 24-48 gi·ªù tr∆∞·ªõc khi xu·∫•t b·∫£n c√¥ng khai.',
  category: 'B√†i vi·∫øt & N·ªôi dung',
  tags: ['H∆∞·ªõng d·∫´n', 'M·ªõi b·∫Øt ƒë·∫ßu', 'Ph·ªï bi·∫øn'],
  isPublished: true,
  priority: 2,
  relatedFAQs: [],
  searchKeywords: ['ƒëƒÉng b√†i', 't·∫°o b√†i vi·∫øt', 'xu·∫•t b·∫£n', 'g·ª≠i duy·ªát', 'author'],
  viewCount: 1250,
  likeCount: 89,
  createdAt: '2024-01-10T10:30:00Z',
  updatedAt: '2024-01-20T14:45:00Z',
});

export default function EditFAQPage() {
  const router = useRouter();
  const params = useParams();
  const [formData, setFormData] = useState<FAQFormData | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('basic');

  useEffect(() => {
    // Simulate loading FAQ data
    const loadFAQ = async () => {
      try {
        setIsLoading(true);
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 500));
        const faq = getMockFAQ(params.id as string);
        setFormData(faq);
      } catch (error) {
        alert('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin FAQ');
        router.push('/dashboard/faqs');
      } finally {
        setIsLoading(false);
      }
    };

    loadFAQ();
  }, [params.id, router]);

  const handleInputChange = (field: keyof FAQFormData, value: any) => {
    if (!formData) return;
    setFormData(prev => ({ ...prev!, [field]: value }));
  };

  const handleTagToggle = (tag: string) => {
    if (!formData) return;
    setFormData(prev => ({
      ...prev!,
      tags: prev!.tags.includes(tag)
        ? prev!.tags.filter(t => t !== tag)
        : [...prev!.tags, tag]
    }));
  };

  const handleAddKeyword = () => {
    if (!formData) return;
    const keyword = prompt('Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm:');
    if (keyword && keyword.trim()) {
      setFormData(prev => ({
        ...prev!,
        searchKeywords: [...prev!.searchKeywords, keyword.trim().toLowerCase()]
      }));
    }
  };

  const handleRemoveKeyword = (index: number) => {
    if (!formData) return;
    setFormData(prev => ({
      ...prev!,
      searchKeywords: prev!.searchKeywords.filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData || !formData.question || !formData.answer) {
      alert('Vui l√≤ng nh·∫≠p c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi');
      return;
    }

    if (!formData.category) {
      alert('Vui l√≤ng ch·ªçn danh m·ª•c');
      return;
    }

    setIsSubmitting(true);
    
    try {
      // Auto-generate search keywords from question and answer
      const autoKeywords = [
        ...formData.question.toLowerCase().split(' ').filter(word => word.length > 3),
        ...formData.answer.toLowerCase().split(' ').filter(word => word.length > 3)
      ].slice(0, 10);
      
      const faqData = { 
        ...formData,
        searchKeywords: [...new Set([...formData.searchKeywords, ...autoKeywords])],
        updatedAt: new Date().toISOString()
      };
      console.log('Updating FAQ:', faqData);
      
      // Simulate network delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      alert('FAQ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!');
      router.push('/dashboard/faqs');
    } catch (error) {
      alert('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t FAQ');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDelete = async () => {
    if (!formData) return;

    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a FAQ "${formData.question}"? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`)) {
      return;
    }

    setIsSubmitting(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      alert('FAQ ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!');
      router.push('/dashboard/faqs');
    } catch (error) {
      alert('C√≥ l·ªói x·∫£y ra khi x√≥a FAQ');
    } finally {
      setIsSubmitting(false);
    }
  };

  const TabButton = ({ id, label, isActive, onClick }: {
    id: string;
    label: string;
    isActive: boolean;
    onClick: (id: string) => void;
  }) => (
    <button
      onClick={() => onClick(id)}
      className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
        isActive
          ? 'bg-primary text-white'
          : 'text-gray-600 hover:text-gray-900 hover:bg-gray-100'
      }`}
    >
      {label}
    </button>
  );

  const getPriorityLabel = (priority: number) => {
    const labels = {
      1: { text: 'R·∫•t cao', color: 'text-red-600' },
      2: { text: 'Cao', color: 'text-orange-600' },
      3: { text: 'Trung b√¨nh', color: 'text-blue-600' },
      4: { text: 'Th·∫•p', color: 'text-gray-600' },
      5: { text: 'R·∫•t th·∫•p', color: 'text-gray-400' }
    };
    return labels[priority as keyof typeof labels] || labels[3];
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="text-4xl mb-4">‚è≥</div>
          <div className="text-lg font-medium text-gray-900">ƒêang t·∫£i FAQ...</div>
        </div>
      </div>
    );
  }

  if (!formData) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="text-4xl mb-4">‚ùå</div>
          <div className="text-lg font-medium text-gray-900">Kh√¥ng t√¨m th·∫•y FAQ</div>
          <Button onClick={() => router.push('/dashboard/faqs')} className="mt-4">
            ‚Üê Quay v·ªÅ danh s√°ch
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Ch·ªânh s·ª≠a FAQ</h1>
          <p className="text-gray-600 mt-2">
            C·∫≠p nh·∫≠t n·ªôi dung v√† c√†i ƒë·∫∑t FAQ
          </p>
        </div>
        <div className="flex items-center gap-3">
          <Button
            variant="outline"
            onClick={() => router.back()}
            disabled={isSubmitting}
          >
            ‚Üê Quay l·∫°i
          </Button>
          <Button
            variant="outline"
            onClick={handleDelete}
            disabled={isSubmitting}
            className="text-red-600 border-red-600 hover:bg-red-50"
          >
            üóëÔ∏è X√≥a FAQ
          </Button>
        </div>
      </div>

      {/* FAQ Info */}
      <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-6">
            <div>
              <span className="text-sm text-blue-600">ID: {formData.id}</span>
            </div>
            <div>
              <span className="text-sm text-blue-600">L∆∞·ª£t xem: {formData.viewCount}</span>
            </div>
            <div>
              <span className="text-sm text-blue-600">L∆∞·ª£t th√≠ch: {formData.likeCount}</span>
            </div>
            <div>
              <span className="text-sm text-blue-600">
                T·∫°o: {new Date(formData.createdAt).toLocaleDateString('vi-VN')}
              </span>
            </div>
            <div>
              <span className="text-sm text-blue-600">
                S·ª≠a: {new Date(formData.updatedAt).toLocaleDateString('vi-VN')}
              </span>
            </div>
          </div>
          <div className="flex items-center gap-3">
            <span className="text-sm text-blue-600">Tr·∫°ng th√°i:</span>
            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
              formData.isPublished 
                ? 'bg-green-100 text-green-800' 
                : 'bg-gray-100 text-gray-800'
            }`}>
              {formData.isPublished ? '‚úÖ ƒê√£ xu·∫•t b·∫£n' : '‚ùå Nh√°p'}
            </span>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg w-fit">
        <TabButton
          id="basic"
          label="‚ùì C√¢u h·ªèi & Tr·∫£ l·ªùi"
          isActive={activeTab === 'basic'}
          onClick={setActiveTab}
        />
        <TabButton
          id="settings"
          label="‚öôÔ∏è C√†i ƒë·∫∑t & Ph√¢n lo·∫°i"
          isActive={activeTab === 'settings'}
          onClick={setActiveTab}
        />
        <TabButton
          id="seo"
          label="üîç SEO & T·ª´ kh√≥a"
          isActive={activeTab === 'seo'}
          onClick={setActiveTab}
        />
      </div>

      <form onSubmit={handleSubmit} className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Form */}
        <div className="lg:col-span-2 space-y-6">
          {activeTab === 'basic' && (
            <div className="bg-white p-6 rounded-lg border border-gray-200 space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">N·ªôi dung FAQ</h3>
              
              {/* Question */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  C√¢u h·ªèi *
                </label>
                <textarea
                  value={formData.question}
                  onChange={(e) => handleInputChange('question', e.target.value)}
                  placeholder="Nh·∫≠p c√¢u h·ªèi th∆∞·ªùng g·∫∑p..."
                  rows={3}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Vi·∫øt c√¢u h·ªèi r√µ r√†ng v√† d·ªÖ hi·ªÉu t·ª´ g√≥c nh√¨n ng∆∞·ªùi d√πng
                </p>
              </div>

              {/* Answer */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  C√¢u tr·∫£ l·ªùi *
                </label>
                <textarea
                  value={formData.answer}
                  onChange={(e) => handleInputChange('answer', e.target.value)}
                  placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi chi ti·∫øt..."
                  rows={12}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Cung c·∫•p c√¢u tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß, ch√≠nh x√°c v√† d·ªÖ hi·ªÉu. C√≥ th·ªÉ s·ª≠ d·ª•ng Markdown.
                </p>
              </div>

              {/* Answer Preview */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Xem tr∆∞·ªõc c√¢u tr·∫£ l·ªùi
                </label>
                <div className="p-4 bg-gray-50 rounded-lg border">
                  <div className="prose max-w-none text-sm">
                    <div className="whitespace-pre-wrap text-gray-700">
                      {formData.answer}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'settings' && (
            <div className="bg-white p-6 rounded-lg border border-gray-200 space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Ph√¢n lo·∫°i & C√†i ƒë·∫∑t</h3>
              
              {/* Category */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Danh m·ª•c *
                </label>
                <select
                  value={formData.category}
                  onChange={(e) => handleInputChange('category', e.target.value)}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
                >
                  <option value="">Ch·ªçn danh m·ª•c</option>
                  {faqCategories.map(category => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>

              {/* Priority */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M·ª©c ƒë·ªô ∆∞u ti√™n
                </label>
                <div className="space-y-2">
                  {[1, 2, 3, 4, 5].map(priority => {
                    const label = getPriorityLabel(priority);
                    return (
                      <label key={priority} className="flex items-center gap-3">
                        <input
                          type="radio"
                          name="priority"
                          value={priority}
                          checked={formData.priority === priority}
                          onChange={(e) => handleInputChange('priority', parseInt(e.target.value))}
                          className="h-4 w-4 text-primary focus:ring-primary border-gray-300"
                        />
                        <div>
                          <span className={`font-medium ${label.color}`}>
                            {label.text}
                          </span>
                          <span className="text-sm text-gray-500 ml-2">
                            (C·∫•p {priority})
                          </span>
                        </div>
                      </label>
                    );
                  })}
                </div>
              </div>

              {/* Tags */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Th·∫ª ph√¢n lo·∫°i
                </label>
                <div className="flex flex-wrap gap-2 mb-3">
                  {commonTags.map(tag => (
                    <button
                      key={tag}
                      type="button"
                      onClick={() => handleTagToggle(tag)}
                      className={`px-3 py-1 text-sm rounded-full border transition-colors ${
                        formData.tags.includes(tag)
                          ? 'bg-primary text-white border-primary'
                          : 'bg-white text-gray-700 border-gray-300 hover:border-primary'
                      }`}
                    >
                      {tag}
                    </button>
                  ))}
                </div>
                {formData.tags.length > 0 && (
                  <div className="text-sm text-gray-600">
                    ƒê√£ ch·ªçn: {formData.tags.join(', ')}
                  </div>
                )}
              </div>

              {/* Published Status */}
              <div className="pt-4 border-t border-gray-200">
                <label className="flex items-center gap-3">
                  <input
                    type="checkbox"
                    checked={formData.isPublished}
                    onChange={(e) => handleInputChange('isPublished', e.target.checked)}
                    className="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                  />
                  <div>
                    <div className="font-medium">Xu·∫•t b·∫£n</div>
                    <div className="text-sm text-gray-500">
                      FAQ s·∫Ω hi·ªÉn th·ªã c√¥ng khai cho ng∆∞·ªùi d√πng
                    </div>
                  </div>
                </label>
              </div>
            </div>
          )}

          {activeTab === 'seo' && (
            <div className="bg-white p-6 rounded-lg border border-gray-200 space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">T·ªëi ∆∞u t√¨m ki·∫øm</h3>
              
              {/* Search Keywords */}
              <div>
                <div className="flex items-center justify-between mb-4">
                  <label className="block text-sm font-medium text-gray-700">
                    T·ª´ kh√≥a t√¨m ki·∫øm
                  </label>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={handleAddKeyword}
                  >
                    ‚ûï Th√™m t·ª´ kh√≥a
                  </Button>
                </div>
                
                {formData.searchKeywords.length > 0 ? (
                  <div className="space-y-2">
                    {formData.searchKeywords.map((keyword, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <span className="font-medium">{keyword}</span>
                        <button
                          type="button"
                          onClick={() => handleRemoveKeyword(index)}
                          className="text-red-600 hover:text-red-800"
                        >
                          ‚ùå
                        </button>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    <div className="text-2xl mb-2">üîç</div>
                    <p>Ch∆∞a c√≥ t·ª´ kh√≥a n√†o</p>
                    <p className="text-sm">Th√™m t·ª´ kh√≥a ƒë·ªÉ ng∆∞·ªùi d√πng d·ªÖ t√¨m th·∫•y FAQ n√†y</p>
                  </div>
                )}
              </div>

              {/* Performance Analytics */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ph√¢n t√≠ch hi·ªáu su·∫•t
                </label>
                <div className="p-4 bg-gray-50 rounded-lg">
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-600">ƒê·ªô d√†i c√¢u h·ªèi:</span>
                      <span className="font-medium ml-2">
                        {formData.question.length} k√Ω t·ª±
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-600">ƒê·ªô d√†i tr·∫£ l·ªùi:</span>
                      <span className="font-medium ml-2">
                        {formData.answer.length} k√Ω t·ª±
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-600">L∆∞·ª£t xem:</span>
                      <span className="font-medium ml-2 text-blue-600">
                        {formData.viewCount.toLocaleString()}
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-600">T·ª∑ l·ªá th√≠ch:</span>
                      <span className="font-medium ml-2 text-green-600">
                        {formData.viewCount > 0 
                          ? `${Math.round((formData.likeCount / formData.viewCount) * 100)}%`
                          : '0%'
                        }
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Stats */}
          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <h3 className="font-semibold text-gray-900 mb-4">Th·ªëng k√™</h3>
            <div className="space-y-3 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">L∆∞·ª£t xem:</span>
                <span className="font-medium text-blue-600">{formData.viewCount.toLocaleString()}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">L∆∞·ª£t th√≠ch:</span>
                <span className="font-medium text-green-600">{formData.likeCount}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">T·ª∑ l·ªá th√≠ch:</span>
                <span className="font-medium">
                  {formData.viewCount > 0 
                    ? `${Math.round((formData.likeCount / formData.viewCount) * 100)}%`
                    : '0%'
                  }
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">∆Øu ti√™n:</span>
                <span className={`font-medium ${getPriorityLabel(formData.priority).color}`}>
                  {getPriorityLabel(formData.priority).text}
                </span>
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="bg-white p-6 rounded-lg border border-gray-200 space-y-4">
            <h3 className="font-semibold text-gray-900">Thao t√°c</h3>
            <div className="space-y-3">
              <Button
                type="submit"
                disabled={isSubmitting}
                className="w-full"
              >
                {isSubmitting ? '‚è≥ ƒêang c·∫≠p nh·∫≠t...' : '‚úÖ C·∫≠p nh·∫≠t FAQ'}
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={() => router.push('/dashboard/faqs')}
                disabled={isSubmitting}
                className="w-full"
              >
                ‚ùå H·ªßy b·ªè
              </Button>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <h3 className="font-semibold text-gray-900 mb-4">Thao t√°c nhanh</h3>
            <div className="space-y-3">
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => handleInputChange('isPublished', !formData.isPublished)}
                className="w-full"
              >
                {formData.isPublished ? 'üëÅÔ∏è‚Äçüó®Ô∏è ·∫®n FAQ' : 'üëÅÔ∏è Hi·ªÉn th·ªã FAQ'}
              </Button>
              
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => {
                  const newPriority = formData.priority === 1 ? 3 : 1;
                  handleInputChange('priority', newPriority);
                }}
                className="w-full"
              >
                {formData.priority === 1 ? '‚¨áÔ∏è Gi·∫£m ∆∞u ti√™n' : '‚¨ÜÔ∏è TƒÉng ∆∞u ti√™n'}
              </Button>
            </div>
          </div>

          {/* History */}
          <div className="bg-white p-6 rounded-lg border border-gray-200">
            <h3 className="font-semibold text-gray-900 mb-4">L·ªãch s·ª≠</h3>
            <div className="space-y-3 text-sm">
              <div>
                <div className="font-medium text-gray-900">T·∫°o FAQ</div>
                <div className="text-gray-500">
                  {new Date(formData.createdAt).toLocaleString('vi-VN')}
                </div>
              </div>
              <div>
                <div className="font-medium text-gray-900">C·∫≠p nh·∫≠t g·∫ßn nh·∫•t</div>
                <div className="text-gray-500">
                  {new Date(formData.updatedAt).toLocaleString('vi-VN')}
                </div>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  );
}
