'use client';

import React, { useState } from 'react';
import { Button } from '@cms/ui';
import { TranslateIcon, LoadingIcon } from '@/components/icons';
import { TranslationService } from '@/lib/translation';

export const TranslationTest: React.FC = () => {
  const [isTranslating, setIsTranslating] = useState(false);
  const [result, setResult] = useState<string>('');

  const testTranslation = async () => {
    setIsTranslating(true);
    setResult('');
    
    try {
      // Test complete post content
        const testContent = {
    title: 'H∆∞·ªõng d·∫´n ph√°t tri·ªÉn ·ª©ng d·ª•ng web v·ªõi React v√† TypeScript',
    excerpt: 'T√≥m t·∫Øt b√†i vi·∫øt v·ªÅ c√¥ng ngh·ªá ph√°t tri·ªÉn web hi·ªán ƒë·∫°i v√† c√°c framework t·ªët nh·∫•t',
    content: '<p>N·ªôi dung chi ti·∫øt v·ªÅ c√°ch <strong>x√¢y d·ª±ng ·ª©ng d·ª•ng web</strong> v·ªõi React, TypeScript, v√† c√°c c√¥ng ngh·ªá hi·ªán ƒë·∫°i kh√°c.</p><p>B√†i vi·∫øt s·∫Ω h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc ƒë·ªÉ t·∫°o ra m·ªôt <em>·ª©ng d·ª•ng web ho√†n ch·ªânh</em>.</p><ul><li>C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng ph√°t tri·ªÉn</li><li>T·∫°o component React</li><li>Qu·∫£n l√Ω state v√† props</li></ul>'
  };
      
      console.log('üß™ Testing post content translation:', testContent);
      
      const translated = await TranslationService.translatePostContent(
        testContent,
        'vi',
        'en'
      );
      
      setResult(`=== ORIGINAL (Vietnamese) ===
Title: ${testContent.title}
Excerpt: ${testContent.excerpt}
Content: ${testContent.content}

=== TRANSLATED (English) ===
Title: ${translated.title}
Excerpt: ${translated.excerpt}
Content: ${translated.content}
Slug: ${translated.slug}
Confidence: ${translated.confidence}

=== TRANSLATION INFO ===
‚Ä¢ Service: ${(translated as any).service || 'Unknown'}
‚Ä¢ Confidence: ${translated.confidence > 0.8 ? 'High (Real API)' : 'Medium (Fallback)'}
‚Ä¢ API Used: ${translated.confidence > 0.8 ? 'Google/LibreTranslate' : 'Fallback Mock'}
‚Ä¢ Via: Next.js API Route (CORS bypass)
‚Ä¢ Check console for detailed logs`);
      
    } catch (error) {
      console.error('Test translation error:', error);
      setResult(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsTranslating(false);
    }
  };

  return (
    <div className="p-4 border border-gray-200 rounded-lg bg-blue-50">
      <h3 className="font-medium text-gray-900 mb-3">üß™ Translation Test</h3>
      
      <Button
        onClick={testTranslation}
        disabled={isTranslating}
        className="mb-3"
        variant="outline"
      >
        {isTranslating ? (
          <>
            <LoadingIcon className="w-4 h-4 mr-2" />
            Testing...
          </>
        ) : (
          <>
            <TranslateIcon className="w-4 h-4 mr-2" />
            Test Full Post Translation (VI ‚Üí EN)
          </>
        )}
      </Button>
      
      {result && (
        <div className="bg-white p-3 rounded border text-sm">
          <pre className="whitespace-pre-wrap">{result}</pre>
        </div>
      )}
    </div>
  );
};
